import { A, B, DeepA, N, O, Entry, S, Value } from './types';
export declare class Random {
    static numbersDeep: (len?: N, max?: N) => DeepA<N>;
    static values: (arr: A<any>) => A<any>;
    static range(min?: N, max?: N, size?: N): N;
    static number(min?: N, max?: N): N;
    static powerOfTwo(min?: N, max?: N): N;
    static boolean(chance?: N): B;
    static array(size?: N, cb?: () => number): A<N>;
    static numbers(size?: N, min?: N, max?: N): A<N>;
    static arrays: (size?: N, maxDeep?: N) => DeepA<N>;
    static arrayGrow: (arr: A<any>, growSize?: N) => A<any>;
    static example: (size?: N) => A<N>;
    static arrayExamples: (size?: N) => A<any>;
    static arraySequence: (start?: N, end?: N) => A<any>;
    static arrayChange: (size: number | undefined, arr: A<any>) => A<any>;
    static arrayMerge: (...arrays: A<any>) => A<any>;
    static arrayDouble: (arr: A<any>) => A<any>;
    static arrayRepeats: (arr: A<any>, repeats?: N) => A<any>;
    static arrayShuffles: (arr: A<any>, repeats?: N) => A<any>;
    static arrayShuffleUnicals: (arr: A<any>) => A<any>;
    static arrayDoubleSome: (arr: A<any>, chance?: N) => A<any>;
    static arrayIndex(arr: A): N;
    static arrayElement(arr: A): O;
    static arrayValues(arr: A, size?: N): A;
    static arrayUnicals(arr: A): A;
    static arrayShuffle(arr: A): A;
    static arrayPart(arr: A): A;
    static arrayDeepSomeValues(arr: A, chance?: N): DeepA<A>;
    static joinedStrings(parts: S[], size?: N): S;
    static textLines(text: S, size?: N): A<S>;
    static objectKey(obj?: O): S;
    static objectValue(obj?: O): Value;
    static objectEntry(obj?: O): Entry;
}
declare const _default: {
    numbersDeep: (len?: number, max?: number) => DeepA<number>;
    values: (arr: A<any>) => A<any>;
    range: typeof Random.range;
    number: typeof Random.number;
    powerOfTwo: typeof Random.powerOfTwo;
    boolean: typeof Random.boolean;
    array: typeof Random.array;
    numbers: typeof Random.numbers;
    arrays: (size?: number, maxDeep?: number) => DeepA<number>;
    arrayGrow: (arr: A<any>, growSize?: number) => A<any>;
    example: (size?: number) => A<number>;
    arrayExamples: (size?: number) => A<any>;
    arraySequence: (start?: number, end?: number) => A<any>;
    arrayChange: (size: number | undefined, arr: A<any>) => A<any>;
    arrayMerge: (...arrays: A<any>) => A<any>;
    arrayDouble: (arr: A<any>) => A<any>;
    arrayRepeats: (arr: A<any>, repeats?: number) => A<any>;
    arrayShuffles: (arr: A<any>, repeats?: number) => A<any>;
    arrayShuffleUnicals: (arr: A<any>) => A<any>;
    arrayDoubleSome: (arr: A<any>, chance?: number) => A<any>;
    arrayIndex: typeof Random.arrayIndex;
    arrayElement: typeof Random.arrayElement;
    arrayValues: typeof Random.arrayValues;
    arrayUnicals: typeof Random.arrayUnicals;
    arrayShuffle: typeof Random.arrayShuffle;
    arrayPart: typeof Random.arrayPart;
    arrayDeepSomeValues: typeof Random.arrayDeepSomeValues;
    joinedStrings: typeof Random.joinedStrings;
    textLines: typeof Random.textLines;
    objectKey: typeof Random.objectKey;
    objectValue: typeof Random.objectValue;
    objectEntry: typeof Random.objectEntry;
};
export default _default;
