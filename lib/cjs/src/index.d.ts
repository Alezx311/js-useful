import Constants from './Constants';
import Random from './Random';
import Values from './Values';
import Text from './Text';
import Functions from './Functions';
export { Constants };
export { Random };
export { Values };
export { Text };
export { Functions };
export declare const JsUseful: {
    Constants: {
        Notes: import("./types").A<string>;
        NotesAlternate: import("./types").A<string>;
        Scales: import("./types").A<string>;
        ColorClassnames: import("./types").A<string>;
        ColorNames: import("./types").A<string>;
        ColorCodes: import("./types").A<string>;
        DurationChars: import("./types").A<string>;
        IntervalChars: import("./types").A<string>;
        NOTES: import("./types").A<string>;
        NOTES_ALTERNATE: import("./types").A<string>;
        SCALES: import("./types").A<string>;
        COLOR_CLASSNAMES: import("./types").A<string>;
        COLOR_NAMES: import("./types").A<string>;
        COLOR_CODES: import("./types").A<string>;
        DURATION_CHARS: import("./types").A<string>;
        INTERVAL_CHARS: import("./types").A<string>;
    };
    Random: {
        numbersDeep: (len?: number, max?: number) => import("./types").DeepA<number>;
        values: (arr: import("./types").A<any>) => import("./types").A<any>;
        range: typeof import("./Random").Random.range;
        number: typeof import("./Random").Random.number;
        powerOfTwo: typeof import("./Random").Random.powerOfTwo;
        boolean: typeof import("./Random").Random.boolean;
        array: typeof import("./Random").Random.array;
        numbers: typeof import("./Random").Random.numbers;
        arrays: (size?: number, maxDeep?: number) => import("./types").DeepA<number>;
        arrayGrow: (arr: import("./types").A<any>, growSize?: number) => import("./types").A<any>;
        example: (size?: number) => import("./types").A<number>;
        arrayExamples: (size?: number) => import("./types").A<any>;
        arraySequence: (start?: number, end?: number) => import("./types").A<any>;
        arrayChange: (size: number | undefined, arr: import("./types").A<any>) => import("./types").A<any>;
        arrayMerge: (...arrays: import("./types").A<any>) => import("./types").A<any>;
        arrayDouble: (arr: import("./types").A<any>) => import("./types").A<any>;
        arrayRepeats: (arr: import("./types").A<any>, repeats?: number) => import("./types").A<any>;
        arrayShuffles: (arr: import("./types").A<any>, repeats?: number) => import("./types").A<any>;
        arrayShuffleUnicals: (arr: import("./types").A<any>) => import("./types").A<any>;
        arrayDoubleSome: (arr: import("./types").A<any>, chance?: number) => import("./types").A<any>;
        arrayIndex: typeof import("./Random").Random.arrayIndex;
        arrayElement: typeof import("./Random").Random.arrayElement;
        arrayValues: typeof import("./Random").Random.arrayValues;
        arrayUnicals: typeof import("./Random").Random.arrayUnicals;
        arrayShuffle: typeof import("./Random").Random.arrayShuffle;
        arrayPart: typeof import("./Random").Random.arrayPart;
        arrayDeepSomeValues: typeof import("./Random").Random.arrayDeepSomeValues;
        joinedStrings: typeof import("./Random").Random.joinedStrings;
        textLines: typeof import("./Random").Random.textLines;
        objectKey: typeof import("./Random").Random.objectKey;
        objectValue: typeof import("./Random").Random.objectValue;
        objectEntry: typeof import("./Random").Random.objectEntry;
    };
    Values: {
        DateNow: typeof import("./Values").Values.DateNow;
        DateValue: typeof import("./Values").Values.DateValue;
        DateStamp: typeof import("./Values").Values.DateStamp;
        TimeStamp: typeof import("./Values").Values.TimeStamp;
        TimeDifference: typeof import("./Values").Values.TimeDifference;
        CalcExp: typeof import("./Values").Values.CalcExp;
    };
    Text: {
        isLength: (str: string) => boolean;
        isIncludes: (str: string, findChars: import("./types").A<string>) => boolean;
    };
    Functions: {};
};
export default JsUseful;
