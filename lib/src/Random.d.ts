export declare type AnyValue = any;
export declare type AnyArray = any[];
export declare class Random {
    static numbersDeep: (len?: number, max?: number) => (number | number[])[];
    static values: (arr: AnyArray) => AnyArray;
    static range(min?: number, max?: number, size?: number): number;
    static number(min?: number, max?: number): number;
    static powerOfTwo(min?: number, max?: number): number;
    static boolean(chance?: number): boolean;
    static array(size?: number, cb?: () => number): AnyArray;
    static numbers(size?: number, min?: number, max?: number): number[];
    static arrays: (size?: number, maxDeep?: number) => AnyArray;
    static arrayGrow: (arr: AnyArray, growSize?: number) => AnyArray;
    static example: (size?: number) => number[];
    static arrayExamples: (size?: number) => AnyArray;
    static arraySequence: (start?: number, end?: number) => AnyArray;
    static arrayChange: (size: number | undefined, arr: AnyArray) => AnyArray;
    static arrayMerge: (...arrays: AnyArray) => AnyArray;
    static arrayDouble: (arr: AnyArray) => AnyArray;
    static arrayRepeats: (arr: AnyArray, repeats?: number) => AnyArray;
    static arrayShuffles: (arr: AnyArray, repeats?: number) => AnyArray;
    static arrayShuffleUnicals: (arr: AnyArray) => AnyArray;
    static arrayDoubleSome: (arr: AnyArray, chance?: number) => AnyArray;
    static arrayIndex(arr: AnyArray): number;
    static arrayElement(arr: AnyArray): AnyValue;
    static arrayValues(arr: AnyArray, size?: number): AnyArray;
    static arrayUnicals(arr: AnyArray): AnyArray;
    static arrayShuffle(arr: AnyArray): AnyArray;
    static arrayPart(arr: AnyArray): AnyArray;
    static arrayDeepSomeValues(arr: AnyArray, chance?: number): AnyArray;
    static joinedStrings(parts: string[], size?: number): string;
    static textLines(text: string, size?: number): string[];
    static objectKey(obj?: {}): string;
    static objectValue(obj?: {}): AnyValue;
    static objectEntry(obj?: {}): [string, any];
}
export default Random;
